package datastructures.linear.stacks.arrays;

import datastructures.linear.stacks.StackADT;

import java.util.Arrays;
import java.util.NoSuchElementException;


public class ArrayStack<E> implements StackADT<E> {

    private final int MAX_SIZE;
    private int top;
    private Object[] stack;

    public ArrayStack(int size) {
        this.MAX_SIZE = size;
        this.top = -1;
        this.stack = new Object[size];
    }

    @Override
    public boolean push(E item) {
        top = top + 1;
        if (top >= MAX_SIZE) {
            throw new IndexOutOfBoundsException("Stack Overflow!");
        }
        stack[top] = item;
        return true;
    }

    @Override
    public E pop() {
        if (isEmpty()) {
            throw new NoSuchElementException("Stack Underflow!");
        }
        return (E) stack[top--];
    }

    @Override
    public E peek() {
        if (isEmpty()) {
            throw new NoSuchElementException("Stack Underflow");
        }
        return (E) stack[top];
    }

    @Override
    public boolean isEmpty() {
        return top == -1;
    }

    @Override
    public String toString() {
        return "ArrayStack{" +
                "MAX_SIZE=" + MAX_SIZE +
                ", top=" + top +
                ", stack=" + Arrays.toString(stack) +
                '}';
    }

    public static void main(String[] args) {
        ArrayStack<Integer> stack = new ArrayStack<>(5);
        for (int i = 0; i < 5; i++) {
            stack.push(i);
        }
        System.out.println(stack);
        System.out.println(stack.pop());
        System.out.println(stack.peek());
        System.out.println(stack);

    }
}